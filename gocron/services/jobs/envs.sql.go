// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: envs.sql

package jobs

import (
	"context"
)

const createEnv = `-- name: CreateEnv :one
INSERT INTO
    envs (id, job_id, KEY, value)
VALUES
    (?, ?, ?, ?) RETURNING id, job_id, "key", value
`

type CreateEnvParams struct {
	ID    int64  `json:"id"`
	JobID string `json:"job_id"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) CreateEnv(ctx context.Context, arg CreateEnvParams) (Env, error) {
	row := q.db.QueryRowContext(ctx, createEnv,
		arg.ID,
		arg.JobID,
		arg.Key,
		arg.Value,
	)
	var i Env
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Key,
		&i.Value,
	)
	return i, err
}

const deleteEnvs = `-- name: DeleteEnvs :exec
DELETE FROM envs
`

func (q *Queries) DeleteEnvs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEnvs)
	return err
}

const listEnvs = `-- name: ListEnvs :many
SELECT
    id, job_id, "key", value
FROM
    envs
ORDER BY
    id
`

func (q *Queries) ListEnvs(ctx context.Context) ([]Env, error) {
	rows, err := q.db.QueryContext(ctx, listEnvs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Env
	for rows.Next() {
		var i Env
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Key,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnvsByJobID = `-- name: ListEnvsByJobID :many
SELECT
    id, job_id, "key", value
FROM
    envs
WHERE
    job_id = ?
ORDER BY
    KEY
`

func (q *Queries) ListEnvsByJobID(ctx context.Context, jobID string) ([]Env, error) {
	rows, err := q.db.QueryContext(ctx, listEnvsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Env
	for rows.Next() {
		var i Env
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Key,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
