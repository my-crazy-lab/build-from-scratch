// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: commands.sql

package jobs

import (
	"context"
	"database/sql"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO
    commands (id, job_id, command, file_output)
VALUES
    (?, ?, ?, ?) RETURNING id, job_id, command, file_output
`

type CreateCommandParams struct {
	ID         int64          `json:"id"`
	JobID      string         `json:"job_id"`
	Command    string         `json:"command"`
	FileOutput sql.NullString `json:"file_output"`
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, createCommand,
		arg.ID,
		arg.JobID,
		arg.Command,
		arg.FileOutput,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Command,
		&i.FileOutput,
	)
	return i, err
}

const deleteCommands = `-- name: DeleteCommands :exec
DELETE FROM commands
`

func (q *Queries) DeleteCommands(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCommands)
	return err
}

const listCommands = `-- name: ListCommands :many
SELECT
    id, job_id, command, file_output
FROM
    commands
ORDER BY
    id
`

func (q *Queries) ListCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Command,
			&i.FileOutput,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommandsByJobID = `-- name: ListCommandsByJobID :many
SELECT
    id, job_id, command, file_output
FROM
    commands
WHERE
    job_id = ?
`

func (q *Queries) ListCommandsByJobID(ctx context.Context, jobID string) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommandsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Command,
			&i.FileOutput,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
